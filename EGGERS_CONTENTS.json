{"home":{"content":"# Intro to Programming, Cont'd\n---\n\nWelcome to lecture 8! Here's a brief class breakdown.\n\n#### Learning Objectives\n---\n\n1. Understand how conditionals and booleans can be used for programmatic decision making\n2. Understand how functions can be used to run similar tasks repeatedly.\n\n#### To Do Today\n---\n\n#### [Warmup](#warmup)\n#### [Functions and Conditionals](#functions-and-conditionals)","idx":0},"title":{"content":"Intro to Programming, Cont'd","idx":1},"desc":{"content":"Introduction to JavaScript","idx":2},"warmup":{"content":"# Warmup\n---\n\n#### [Class Notes](http://samantha.fewd.us/#fork/mottaquikarim/NYCDA_JS_Day_2) | [Livestreaming Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_2)\n\n<p></p>\n\nLet's begin with a few warmup exercises.\n\n#### Exercise 1\n---\n\nReally quickly, **ALL IN TERMINAL**:\n\n1. **Create** a new folder in your desktop.\n2. **Create** an index.html file with some text\n3. **Create** a styles folder\n4. **Add** empty main.css\n5. **Initialize** git in this directory\n6. **Create repo** in GitHub\n7. **Push** repo to Github\n\n#### Exercise 2\n---\n\nHere's a quick review of some of the js basics we covered:\n\n```js\n// declare a variable\nconst a = 1;\nlet b = 2;\n\n// update variable\nb = 3;\n\n// debug code\nconsole.log(b)\n\n// operations:\n\nconst sum = b + 1; // addition\nconst diff = b - 0; // subtraction\nconst prod = b * 1; // multiplication\nconst quotient = b / 1; // division\nconst mod = b % 2; // remainder, modulus\nconst exp = b ** 2; // exponent, b ^ 2\n```\n\n#### [Problems 1-16: BASIC PSET](http://samantha.fewd.us/#fork/mottaquikarim/NYCDA_basic_pset_1) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_basic_pset_1)\n**PURPOSE**: basic review, finger warmers, tough challenges\n\n\n<!--\n#### [Problems 1-8: The Basics](http://samantha.fewd.us/#fork/mottaquikarim/FEWD629_functions_pset_1) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD629_functions_pset_1)\n**PURPOSE**: basic review, finger warmers.\n\n(If you have completed these already, the  consider the ones below).\n\n#### [Problems 9-16: The Basics](http://samantha.fewd.us/#fork/mottaquikarim/FEWD629_functions_pset_2) | [LIVE](http://samantha.fewd.us/#broadcast/mottaquikarim/FEWD629_functions_pset_2)\n**PURPOSE**: more challenging, use of conditionals and random number generators.\n\n-->\n","idx":3},"functions-and-conditionals":{"content":"# Functions and Conditionals\n---\nLet's learn to actually do stuff with javascript now. Functions and conditionals well help us automate programming tasks and also build in decision making capabilities into our programs.\n\n#### [Class Notes](http://samantha.fewd.us/#fork/mottaquikarim/NYCDA_JS_Day_2) | [Livestreaming Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/NYCDA_JS_Day_2)\n\n#### Learning Objectives\n---\n1. Understand how to use functions to abstract away common coding tasks\n2. Use conditionals to build in decision making into our code.\n\n#### Exercises\n---\nThe following PSET contains 10 problems. \n#### [PSET - Functions](http://samantha.fewd.us/#fork/mottaquikarim/Functions_Practice) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Functions_Practice)\nWe will attempt to solve some or MOST of them.\n\n#### [PSET - Conditionals](http://samantha.fewd.us/#fork/mottaquikarim/Conditionals) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Conditionals)\nTry to solve all of these\n\n#### [Problem - Calculate Grade](http://samantha.fewd.us/#fork/mottaquikarim/Calculate_Grade) | [LIVE Instructor Notes](http://samantha.fewd.us/#broadcast/mottaquikarim/Calculate_Grade)\nThis one is more difficult, try it out though!\n\n#### Functions\n---\n\nFunctions are essentially actions. We use functions to save a set of `instructions` that we can tell javascript to use over and over again. Functions have names, just like variables, but they hold more than just primitive values.\n\n#### Example\n\nThis is a function declaration.\n\n```javascript\nfunction doSomething() {\n\talert('doing something!');\n}\n```\n\nHere is how we would call that function\n```javascript\n// copying over last code snippet for convenience\nfunction doSomething() {\n\talert('doing something!');\n}\n\n// calling it now\ndoSomething();\n```\n\n#### Alternate way to do this\n\n```javascript\nvar doSomething = function() {\n\talert('doing something!');\n}\n\n// call it\ndoSomething();\n```\n\n#### Conditionals\n---\n\nUsed do perform logic\n\n### Rundown\n<a>JavaScript Logical Operators</a>\n<ul>\n    <li>`===`</li>\n    <li>`!==`</li>\n    <li>`>`</li>\n    <li>`<`</li>\n    <li>`>=`</li>\n    <li>`<=`</li>\n    <li>`&&`</li>\n    <li>`||`</li>\n    <li>`!`</li>\n</ul>\n```js\n// Comparison operators\n// you can evaluate a situation by comparing one value in the script\n// to what you expect it might be\n// the result will be a boolean: true or false\n\n/*\n *  the strict equality checking operator\n *  SYMBOL: ===\n */\nvar three = 3;\nvar equalityCheck = ( three === 3 );\nconsole.log( 'three === 3', equalityCheck );\n// note that equalityCheck, and ALL OTHER COMPARISON OPERATORS\n// evaluate to booleans\nconsole.log( 'typeof equalityCheck', typeof equalityCheck );\n\nvar equalityCheck2 = ( three === '3' ); // false because three is Number\n                                       // but '3' is a string\nconsole.log( \"( three === '3' )\", equalityCheck2 );\n// ALWAYS USE THE STRICT EQUALITY OPERATOR!!\n\n/*\n *  the strict NOT EQUAL checking operator\n *  SYMBOL: !==\n */\n\nvar notEqualityCheck = ( three !== 4 ); // should be true\nvar notEqualityCheck2 = ( three !== 3 ); // should be false;\n\nconsole.log( '( three !== 4 )', notEqualityCheck );\nconsole.log( '( three !== 3 )', notEqualityCheck2 );\n\n/*\n *  the greater than operator\n *  SYMBOL: >\n */\nvar greaterThan = ( three > 4 ); // returns false\nvar greaterThan2 = ( three > 2 ); // true\nconsole.log( '( three > 4 )', greaterThan );\nconsole.log( '( three > 2 )', greaterThan2 );\n\n/*\n *  the less than operator\n *  SYMBOL: <\n */\nvar lessThan = ( three < 2 ); // returns false\nvar lessThan2 = ( three < 5 ); // true\nconsole.log( '(three < 2)', lessThan );\nconsole.log( '(three < 5)', lessThan2 );\n \n/*\n *  the greater than or equal to operator\n *  SYMBOL: >=\n */ \nvar greaterThanOrEqualTo = ( three >= 4 ); // false\nvar greaterThanOrEqualTo2 = ( three >= 3 ); // true\nconsole.log( '( three >= 4 )', greaterThanOrEqualTo );\nconsole.log( '( three >= 3 )', greaterThanOrEqualTo2 );\n\n/*\n *  the less than or equal to operator\n *  SYMBOL: <=\n */ \nvar lessThanOrEqualTo = ( three <= 2 ); // false\nvar lessThanOrEqualTo2 = ( three <= 3 ); // true\nconsole.log( '( three <= 2 )', lessThanOrEqualTo );\nconsole.log( '( three <= 3 )', lessThanOrEqualTo2 );\n\n/*\n *  LOGICAL OPERATORS\n *  logical operators allow you to compare the results of more than one\n *  comparison operator\n *  TYPES: '&&', '||'\n */ \n\n/*\n *  the AND operator\n *  SYMBOL: &&\n *  returns true only when both expressions evaluate to true\n */ \nvar andOp = ((2 < 5) && (3 >=2)); // is 2 less than five AND\n                                  // is 3 greater than or equal to 2\nconsole.log( '((2 < 5) && (3 >=2))', andOp );\nconsole.log( 'typeof andOp', andOp );\n// NOTE, we can string together as many ANDs as we need...\n\n/*\n *  the OR operator\n *  SYMBOL: ||\n *  returns true when ONE of the expressions are true\n */ \nvar orOp = ((2 < 5) || (2 < 1)); // if EITHER one of these exprs are true\n                                 // then will evaluate to true\nconsole.log( '((2 < 5) || (2 < 1))', orOp );\n// NOTE, we can string together as many ORs as we need...\n\n/*\n *  the NOT operator\n *  SYMBOL: !\n *  returns opposite of evaluated expression\n */ \nvar notOp = !(2 < 1);\nconsole.log( '!(2 < 1)', notOp );\n\n// Complete example\n\nfunction checkNumber () {\n    \n    var n = prompt(\"Enter a number\", \"5\")\n        , entered = \"You entered a number between\"; \n\n    if (n >= 1 && n < 10) {\n        alert(entered + \" 0 and 10\");\n    }\n    else if (n >= 10 && n < 20) {\n        alert(entered + \" 9 and 20\");\n    }\n    else if (n >= 20 && n < 30) { \n        alert(entered + \" 19 and 30\");\n    }\n    else if (n >= 30 && n < 40) {\n        alert(entered + \" 29 and 40\");\n    }\n    else if (n >= 40 && n <= 100) {\n        alert(entered + \" 39 and 100\");\n    }\n    else if (n < 1 || n > 100) {\n        alert(\"You entered a number less than 1 or greater than 100\");\n    }\n    else {\n        alert(\"You did not enter a number!\");\n      }\n}\n\n\n```\n\n<a>The conditional block</a>\n<ul>\n    <li>the `if` statement</li>\n    <li>the `if/else` statement</li>\n    <li>the `if/else if/else` statement</li>\n</ul>\n```js\n// the if..else statement check a condition\n// if it resolves to true the first code block is run\n// if the condition resolved to false the second code block is run instead\n\nvar pass = 50    // pass mark\n    , score = 75   // current score\n    , msg;   // message\n    \n// select message to write based on score    \nif ( score >= pass ) {     \n    // conditional statement\n    // if code block\n    // anything in here will be run if\n    // the stuff in the (...) evaluates to true\n    msg = \"Congratulations you passed!\";  \n}    \nelse {  // else code block; if the obove is NOT true then...\n    msg = \" Try again :( \";  \n}\n// note this example of how we can use the if/else\n// to set the value of a variable\nconsole.log( msg ); \n\n/*\n *  the if/else if/else block\n */\n\nvar passingGrade;\nif ( score < 50 ) {\n    passingGrade = \"F\";\n}\nelse if ( score < 60 ) {\n    passingGrade = \"D\";\n}\nelse if ( score < 70 ) {\n    passingGrade = \"C\";\n}\nelse if ( score < 80 ) {\n    passingGrade = \"B\";\n}\nelse if ( score < 90 ) {\n    passingGrade = \"A\"\n}\nelse {\n    passingGrade = \"A+\";\n}\n\nconsole.log( \"Your grade is: \", passingGrade );\n\n\n\n\n\n    \n    \n    \n\n\n\n\n\n\n\n```","idx":4},"__list__":["home","title","desc","warmup","functions-and-conditionals"]}